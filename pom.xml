<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>be.noeson</groupId>
	<artifactId>myfinancialmanager</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>myfinancialmanager</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<!-- Build properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<node.version>v8.11.3</node.version>
		<npm.version>5.6.0</npm.version>

		<!-- Plugin versions -->
		<frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>

		<!-- Docker -->
		<docker.account.name>bnoeson</docker.account.name>
		<docker.backend.name>myfinancialmanager</docker.backend.name>
		<docker.frontend.name>myfinwebapp</docker.frontend.name>
		<dockerfile-maven-version>1.4.3</dockerfile-maven-version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Batch -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-batch</artifactId>
		</dependency>

		<!-- db -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.7</version>
		</dependency>

		<!-- More info : https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.2.11</version>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Frontend integration -->
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>${frontend-maven-plugin.version}</version>
				<configuration>
					<workingDirectory>frontend/</workingDirectory>
					<installDirectory>frontend/</installDirectory>
				</configuration>
				<executions>
					<execution>
						<id>install node and npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<npmVersion>${npm.version}</npmVersion>
						</configuration>
					</execution>

					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>

					<execution>
						<id>npm run-script prod</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<arguments>run-script build</arguments> <!-- TODO add build-prod -->
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--QC-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.17</version>
			</plugin>
		</plugins>
	</build>


	<profiles>
		<profile>
			<id>build-images</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.6.0</version>
						<configuration>
							<executable>true</executable>
						</configuration>
						<executions>
							<!-- docker : remove existing image -->
							<execution>
								<id>docker-clean</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory></workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>rmi</argument>
										<argument>-f</argument>
										<argument>${docker.account.name}/${docker.backend.name}</argument>
										<argument>${docker.account.name}/${docker.frontend.name}</argument>
									</arguments>
									<successCodes>
										<successCode>0</successCode>
										<successCode>1</successCode>
									</successCodes>
								</configuration>
							</execution>

							<!-- docker : build new image -->
							<execution>
								<id>docker-build-backend</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory></workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>build</argument>
										<argument>-t</argument>
										<argument>${docker.account.name}/${docker.backend.name}</argument>
										<argument>.</argument>
									</arguments>
								</configuration>
							</execution>

							<!-- docker : build new image -->
							<execution>
								<id>docker-build-frontend</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>frontend</workingDirectory>
									<executable>docker</executable>
									<arguments>
										<argument>build</argument>
										<argument>-t</argument>
										<argument>${docker.account.name}/${docker.frontend.name}</argument>
										<argument>.</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>backend-hot-deploy</id>
			<dependencies>
				<dependency>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.6.0</version>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<configuration>
							<executable>true</executable>
						</configuration>
						<executions>
							<execution>
								<id>remove</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>docker</executable>
									<workingDirectory></workingDirectory>
									<arguments>
										<argument>exec</argument>
										<argument>${project.artifactId}</argument>
										<argument>rm</argument>
										<argument>-rf</argument>
										<argument>/app.jar</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>copy</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>docker</executable>
									<workingDirectory></workingDirectory>
									<arguments>
										<argument>cp</argument>
										<argument>
											${project.basedir}/target/${project.artifactId}-${project.version}.jar
										</argument>
										<argument>${project.artifactId}:/app.jar</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>restart</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>docker</executable>
									<workingDirectory></workingDirectory>
									<arguments>
										<argument>restart</argument>
										<argument>${project.artifactId}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>




</project>
